name: 𝌚 Release

on:
  workflow_dispatch:
    inputs:
      force-publish:
        required: true
        type: boolean
        description: Publish Releases at Anytime

  workflow_run:
    workflows: [ 🧪 Tests and Checks ]
    branches: [main]
    types: [ completed ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  release-please:
    runs-on: ubuntu-latest
    if: >
      github.ref == 'refs/heads/main' &&
      github.repository_owner == 'kikokikok' &&
      github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success'

    outputs:
      releases_created: ${{ steps.release.outputs['rusty-vault--release_created'] || steps.release.outputs['rusty-vault-wasm--release_created'] }}
      wasm_release_created: ${{ steps.release.outputs['rusty-vault-wasm--release_created'] }}
      tag: ${{ steps.release.outputs['rusty-vault--tag_name'] }}

    steps:
      - name: Run release-please
        id: release
        uses: google-github-actions/release-please-action@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          default-branch: main
          command: manifest
          extra-files: |
            README.md

  # Build auditable (https://github.com/rust-secure-code/cargo-auditable) binaries across os's/target's.
  build-and-release-auditable-bin:
    runs-on: ${{ matrix.os }}
    needs: [ release-please ]

    permissions:
      contents: write

    strategy:
      matrix:
        include:
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
          - target: aarch64-unknown-linux-musl
            os: ubuntu-latest
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
          - target: x86_64-apple-darwin
            os: macos-latest
          - target: aarch64-apple-darwin
            os: macos-latest
          - target: x86_64-pc-windows-msvc
            os: windows-latest

    steps:
      - name: Install Protoc
        uses: arduino/setup-protoc@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install cargo tools
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: cargo-auditable

      - name: Install Cross-Compilation Tools
        uses: taiki-e/setup-cross-toolchain-action@v1
        with:
          target: ${{ matrix.target }}
        if: startsWith(matrix.os, 'ubuntu')  && !contains(matrix.target, '-musl')

      - name: Install cross for Musl
        uses: taiki-e/install-action@cross
        if: contains(matrix.target, '-musl')

      - name: Build Auditable Binary
        uses: actions-rs/cargo@v1
        with:
          command: auditable
          args: build --manifest-path rusty-vault/Cargo.toml --release

      - name: Upload release binaries
        uses: taiki-e/upload-rust-binary-action@v1
        with:
          bin: rusty-vault
          ref: refs/tags/${{ needs.release-please.outputs.tag }}
          include: LICENSE-MIT,LICENSE-APACHE,README.md
          archive: $bin-$tag-$target
          target: ${{ matrix.target }}
          token: ${{ secrets.GITHUB_TOKEN }}
        env:
          CARGO_PROFILE_RELEASE_LTO: true
          CARGO_PROFILE_RELEASE_CODEGEN_UNITS: 1


  push-docker-build:
    runs-on: ubuntu-latest
    needs: [ release-please ]

    env:
      DOCKER_BUILDKIT: 1

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Get Version Number
        shell: bash
        run: echo "PROJECT_VERSION=$(sed -n 's/^version = "\(.*\)"/\1/p' rusty-vault/Cargo.toml | head -n1)" >> $GITHUB_ENV

      # https://github.com/docker/setup-qemu-action
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v2

      # https://github.com/docker/setup-buildx-action
      - name: Setup Buildx
        uses: docker/setup-buildx-action@v2
        with:
          buildkitd-flags: "--debug"

      - name: Login to Dockerhub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker Build and Push
        uses: docker/build-push-action@v4
        with:
          build-args: |
            RUST_BUILD_IMG=rust:1.71-slim-bullseye
          cache-from: type=registry,ref=ghcr.io/${{ github.repository_owner }}/rusty-vault:latest
          cache-to: type=registry,ref=ghcr.io/${{ github.repository_owner }}/rusty-vault:latest,mode=max
          file: docker/Dockerfile
          context: .
          platforms: linux/amd64, linux/arm64
          push: true
          tags: |
            ${{ github.repository_owner }}/rusty-vault:${{ env.PROJECT_VERSION }}
            ${{ github.repository_owner }}/rusty-vault:latest
            ghcr.io/${{ github.repository_owner }}/rusty-vault:${{ env.PROJECT_VERSION }}
            ghcr.io/${{ github.repository_owner }}/rusty-vault:latest
